var Kodhus=function(e){"use strict";var t,n,i,r=(t=document.querySelectorAll("[data-dialog]"),n=document.querySelectorAll(".cdt-dialog-container"),t.forEach(function(e){e.addEventListener("click",function(){document.querySelector(e.dataset.dialog).classList.remove("hide")})}),void n.forEach(function(t){return t.querySelectorAll("[data-close='true']").forEach(function(e){return e.addEventListener("click",function(){return t.classList.add("hide")})})})),o=void document.querySelectorAll(".cdt-notification").forEach(function(e){var t=e.querySelector(".close")||e.querySelector("[data-close='true']");t&&t.addEventListener("click",function(){e.classList.add("hide")})}),p={tabletPhoneBreakpoint:768,desktopBreakPoint:1024},a=function(){var t=document.querySelector(".cdt-top-nav"),e=document.querySelector(".cdt-top-nav .mobile-trigger"),i=document.querySelectorAll(".cdt-top-nav .navigations"),o=document.querySelector(".cdt-second-nav"),n=document.querySelectorAll(".cdt-nav > li"),a=[],l=[],s=!1,r=!1,c=document.createElement("div");c.classList.add("mobile-navigation");var u=function(){var e=document.createElement("nav");e.classList.add("cdt-list","cdt-secondary");var n=document.createElement("ul");if(e.appendChild(n),window.innerWidth<=p.desktopBreakPoint){var r=document.querySelectorAll(".cdt-nav-responsive");r.forEach(function(e){a.push(e.cloneNode(!0)),l.push(e.parentElement)}),s||(i.forEach(function(e){e.querySelectorAll("nav").forEach(function(e){e.classList.contains("no-responsive")||(c.appendChild(e.cloneNode(!0)),e.classList.toggle("hide"))})}),t.appendChild(c),c.style.top=t.offsetHeight+"px",r.forEach(function(e,t){e.querySelectorAll(":scope > ul > li").forEach(function(e){n.appendChild(e)}),l[t].removeChild(r[t])}),c.appendChild(e),c.classList.add("navigations"),s=!0)}else o&&(t.style.height=document.querySelectorAll(".navigations")[0].offsetHeight+"px"),s&&(l.map(function(e,t){return e.appendChild(a[t])}),a.length=0,l.length=0),c&&c.classList.remove("open")};i&&t&&(window.addEventListener("resize",function(){u()}),u()),e&&e.addEventListener("click",function(){c.classList.toggle("open"),r=!r}),n.forEach(function(e){var t=document.querySelectorAll(".cdt-nav li ul");e.addEventListener("click",function(){t.forEach(function(e){e.classList.add("hide")}),e.querySelector("ul").classList.remove("hide")})});var d=document.querySelectorAll(".cdt-list li ul .cdt-list-item");d.forEach(function(e){e.addEventListener("click",function(){d.forEach(function(e){e.classList.remove("selected")}),e.classList.add("selected")})});var f=document.querySelector(".cdt-top-nav.hide-on-scroll");if(f){var y=!0,h=0,v=!1,m=0;r||window.addEventListener("scroll",function(){h=window.scrollY,v||(window.requestAnimationFrame(function(){var e;m<(e=h)?y&&"60"<e&&(y=!1,f.style.transition="transform 400ms ease-out",f.style.transform="translateY(-100%)"):y||(f.style.transition="transform 400ms ease-out",f.style.transform="translateY(0)",y=!0),m=e,v=!1}),v=!0)})}}(),l=function(){var e=document.querySelectorAll(".drop-toggle");if(e){e.forEach(function(i){var o=i.nextElementSibling;o.querySelectorAll("li").forEach(function(e){e.addEventListener("click",function(){o.classList.toggle("open")})}),i.addEventListener("click",function(e){e.stopImmediatePropagation();var t=i.getBoundingClientRect(),n=void 0,r=void 0;n=o.offsetHeight+t.bottom+4<window.innerHeight?i.offsetHeight+4:-(o.offsetHeight+4),r=o.offsetWidth+t.left<window.innerWidth?0:-o.offsetWidth+i.offsetWidth,o.style.transform="translate3d("+r+"px, "+n+"px, 0)",o.classList.toggle("open")})}),document.addEventListener("click",function(){e.forEach(function(e){e.nextElementSibling.classList.remove("open")})})}}(),s=function(){var e=document.querySelectorAll("[data-aiv]"),i=function(e,t,n,r,i){var o=e.offsetHeight,a=e.offsetTop;e.style.transformOrigin="50% 100%",e.style.transform="translateY(100px) scale(1)",e.style.opacity="0",t+window.innerHeight>a+o&&(e.style.transition="all "+n+"ms "+i+"ms "+r,setTimeout(function(){e.style.transform="translateY(0) scale(1)",e.style.opacity="1"},0))},t=[];e.forEach(function(e){t.push({element:e,duration:e.getAttribute("data-duration")||1e3,timingFunction:e.getAttribute("data-timing-function")||"",delay:e.getAttribute("data-delay")?parseInt(e.getAttribute("data-delay"),0):0,elementHeight:e.offsetHeight,elementTop:e.offsetTop,onChildren:e.getAttribute("data-aiv-children")||!1,childrenDelay:e.getAttribute("data-children-delay")||0})});if(e.length){var n=0,o=!1;window.addEventListener("scroll",function(){n=window.scrollY,o||(window.requestAnimationFrame(function(){var r;r=n,t.forEach(function(n){n.onChildren?n.element.querySelectorAll(":scope > *").forEach(function(e,t){i(e,r,n.duration,n.timingFunction,t*n.childrenDelay)}):i(n.element,r,n.duration,n.timingFunction,n.delay)}),o=!1}),o=!0)})}}(),c=function(){var t=document.querySelectorAll("[data-bg-parallax]"),e=!1,n=0,l=function(e){e?e.style.backgroundPosition="center 0":t.forEach(function(e){e.style.backgroundPosition="center 0"})};l();window.addEventListener("scroll",function(){n=window.scrollY,e||(window.requestAnimationFrame(function(){var a;a=n,t.forEach(function(e){if(a>e.offsetTop-window.innerHeight/2){var t=e.offsetTop<window.innerHeight/2?e.offsetTop:e.offsetTop-window.innerHeight/2,n=t+e.offsetHeight,r=(a-(i=t))*(-50-(o=0))/(n-i)+o;e.style.backgroundPosition="center "+r+"px"}else l(e);var i,o}),e=!1}),e=!0)})}(),u=function(){var t,n,r,i=!1,o=(t=document.createElement("fake"),n={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",transition:"transitionend"},r="transitionend",Object.keys(n).forEach(function(e){void 0!==t.style[e]&&(r=n[e])}),r),e=document.querySelector(".cdt-carousel");if(e){var a=e.getAttribute("data-carousel-type"),l=!1;l="true"===e.getAttribute("data-auto-slide");var s=e.getAttribute("data-slide-delay"),c=!1;c="true"===e.getAttribute("data-infinite");var u=e.querySelectorAll(".controls li"),d=e.querySelector(".arrow.left"),f=e.querySelector(".arrow.right"),y=e.querySelectorAll("section"),h=y.length,v="fade"===a?e.getAttribute("data-opacity-duration"):0,m=document.createElement("div"),p=0,g=function(){"slide-sense"===a&&(m.classList.add("slideSense-container"),e.prepend(m)),y.forEach(function(e,t){"fade"===a?(e.style.zIndex=0,e.style.opacity=0,e.style.transition="opacity "+v+"ms"):"overlay"===a||"slide"===a?t!==p&&(e.style.zIndex=0):"slide-sense"===a&&(e.style.position="relative",m.appendChild(e))})},E=function(n,e){i||(f.style.display=c||n!==h-1?"block":"none",d.style.display=c||0!==n?"block":"none","slide-sense"!==a&&g(),"slide-sense"===a&&(m.style.transition="transform 1s",m.style.transform="translateX("+25*-n+"%)",p=n),"slide"===a?y[n].style.zIndex=5:"overlay"===a&&(y[p].style.zIndex=7,y[n].style.zIndex=6),"overlay"!==a&&"slide"!==a||(y[n].style.transform=c?p<n&&n!==h-1||e&&"right"===e?"translateX(100%)":"translateX(-100%)":p<n?"translateX(100%)":"translateX(-100%)"),u.length&&u.forEach(function(e){e.classList.remove("selected")}),setTimeout(function(){if(i=!0,"slide-sense"===a)u.length&&u[n].classList.add("selected"),m.addEventListener(o,function(){p=n,i=!1});else{y[p].style.transition="transform 1s","fade"===a&&(y[n].style.zIndex=6,y[n].style.opacity=1,p=n,i=!1),"slide"===a&&(y[n].style.transition="transform 1s"),"overlay"!==a&&"slide"!==a||(y[p].style.transform=c?p<n&&n!==h-1||e&&"right"===e?"translateX(-100%)":"translateX(100%)":p<n?"translateX(-100%)":"translateX(100%)",y[n].style.transform="translateX(0)",y[n].style.transform="translateX(0)"),u.length&&u[n].classList.add("selected");var t=0;y[p].addEventListener(o,function(e){1===(t+=1)&&"transform"===e.propertyName&&(y[p].style.transform="",y[p].style.transition="",y[n].style.transform="",y[n].style.transition="","overlay"===a?(y[p].style.zIndex=6,y[n].style.zIndex=7):"slide"===a&&(g(),y[p].style.zIndex=5,y[n].style.zIndex=6),p=n,i=!1)})}},0))};l&&(c=!0,setInterval(function(){E(h<=p+1?c?0:h-1:p+1)},s)),d&&d.addEventListener("click",function(){if(0!==p||c){E(p-1<0?c?h-1:0:p-1,"left")}}),f&&f.addEventListener("click",function(){if(p!==h-1||c){E(h<=p+1?c?0:h-1:p+1,"right")}});g(),y[p].style.zIndex=6,"fade"===a&&(y[p].style.opacity=1),u.length&&u[p].classList.add("selected"),u.forEach(function(e,t){e.addEventListener("click",function(){t!==p&&E(t)})})}}(),d=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},f=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),y=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&l.return&&l.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},h=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},v=function(){function s(){d(this,s)}return f(s,[{key:"init",value:function(e){var n=this;this.windowHeight=window.innerHeight,this.options=e,document.querySelector("body").style.height=this.frameToScreen(this.findEndingFrame())+this.windowHeight+"px",this.scrollables=[],e.items.forEach(function(e){var t={el:document.querySelector(e.selector),story:s.createStory(e.frames)};n.scrollables.push(t)}),this.initializePositions(),this.initEventHandlers(),this.start=0}},{key:"findEndingFrame",value:function(){var n=-9999999,r={};return this.options.items.map(function(e){return e.frames}).reduce(function(e,t){return[].concat(h(e),h(t))},[]).forEach(function(e){var t=s.getDigitValue(e.scrollPosition);n<t&&(n=t,r=e)}),r.scrollPosition}},{key:"initializePositions",value:function(){this.scrollables.forEach(function(t){var n=t.story.initialStyles;Object.keys(n).forEach(function(e){t.el.style[e]=n[e]})})}},{key:"frameToScreen",value:function(e){var t=s.getDigitValue(e);return"%"===e.charAt(e.length-1)?t/100*this.windowHeight:t}},{key:"scroll",value:function(l){var e=this;this.scrollables.forEach(function(a){var r=a.story.frames[0],i=a.story.frames[a.story.frames.length-1];l<e.frameToScreen(r.start)?Object.keys(r.styles).forEach(function(e){var t=-1,n=r.styles[e].beginProp[0].replace(/\$/g,function(){return t+=1,r.styles[e].beginProp[1][t]});a.el.style[e]=n}):l>e.frameToScreen(i.end)?Object.keys(i.styles).forEach(function(e){var t=-1,n=i.styles[e].beginProp[0].replace(/\$/g,function(){return t+=1,i.styles[e].endProp[1][t]});a.el.style[e]=n}):a.story.frames.forEach(function(r){var i=e.frameToScreen(r.start),o=e.frameToScreen(r.end);s.between(i,o,l)&&Object.keys(r.styles).forEach(function(e){var t=-1,n=r.styles[e].beginProp[0].replace(/\$/g,function(){return t+=1,s.calculateRangeValue(i,o,r.styles[e].beginProp[1][t],r.styles[e].endProp[1][t],l)});a.el.style[e]=n})})})}},{key:"initEventHandlers",value:function(){var e=this,t=0,n=!1;window.addEventListener("scroll",function(){t=window.scrollY,n||(window.requestAnimationFrame(function(){e.scroll(t),n=!1}),n=!0)})}}],[{key:"createStory",value:function(n){var t=(n=n.map(function(e,t){return""===e.styles&&0!==t&&(e.styles=n[t-1].styles),e})).length,s=/[+-]?\d+/g;return n.reduce(function(o,e,a){if(a<t-1){var l={start:e.scrollPosition,end:n[a+1].scrollPosition,styles:{}};e.styles.split(";").forEach(function(e){if(""!==e){var t=e.split(":");if(0===a){var n=y(t,2),r=n[0],i=n[1];o.initialStyles[r]=i}l.styles[t[0]]={beginProp:[t[1].replace(s,"$"),t[1].match(s).map(function(e){return+e})]}}}),n[a+1].styles.split(";").forEach(function(e){if(""!==e){var t=e.split(":");l.styles[t[0]].endProp=[t[1].replace(s,"$"),t[1].match(s).map(function(e){return+e})]}}),o.frames=[].concat(h(o.frames),[l])}return o},{initialStyles:{},frames:[]})}},{key:"calculateRangeValue",value:function(e,t,n,r,i){var o=(i-e)*(r-n)/(t-e)+n;return Math.ceil(o)}},{key:"between",value:function(e,t,n){var r=Math.min.apply(Math,[e,t]),i=Math.max.apply(Math,[e,t]);return r<=n&&n<=i}},{key:"getDigitValue",value:function(e){return+e.match(/\d+/)}}]),s}(),m=(i=0,void document.querySelectorAll(".cdt-tab").forEach(function(r){r.children[0].querySelectorAll("li").forEach(function(t,n){t.classList.contains("selected")&&(i=n,r.querySelector(".tabs-content").children[i].classList.add("show")),t.addEventListener("click",function(e){e.stopPropagation(),e.preventDefault(),i=n,r.querySelectorAll("li").forEach(function(e){return e.classList.remove("selected")}),Array.from(r.querySelector(".tabs-content").children).forEach(function(e,t){t===i?e.classList.add("show"):e.classList.remove("show")}),t.classList.add("selected")})})})),g=function(){function e(){d(this,e)}return f(e,[{key:"init",value:function(e){var t=e.defaultColor,n=void 0===t?"#999":t,r=e.activeIndex,i=void 0===r?0:r;this.defaultColor=n,this.element=document.querySelector(".cdt-step-progressbar");var o=Array.from(this.element.children);this.element.classList.contains("horizontal")&&this.element.querySelectorAll("li").forEach(function(e){e.style.width=100/(o.length-1)+"%"}),this.setActiveIndex(i)}},{key:"fixActive",value:function(){this.element.querySelectorAll("li.active").forEach(function(e){return e.classList.remove("fix-last-active")}),Array.from(this.element.querySelectorAll("li.active")).slice(-1)[0].classList.add("fix-last-active")}},{key:"setActiveIndex",value:function(n){this.element.querySelectorAll("li").forEach(function(e){return e.classList.remove("active")}),Array.from(this.element.children).filter(function(e,t){return t<=n}).forEach(function(e){return e.classList.add("active")}),this.fixActive()}}]),e}();return document.querySelectorAll("pre code").forEach(function(e){hljs&&hljs.highlightBlock(e)}),e.Dialog=r,e.Notification=o,e.Navigation=a,e.Aiv=s,e.BGParallax=c,e.Carousel=u,e.KScroll=v,e.Tab=m,e.StepProgressBar=g,e.Dropdown=l,e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,